{"version":3,"sources":["src\\common\\socketUtils.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AAOA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,OAAJ;AACA,IAAI,gBAAJ;;AAEA,IAAI,QAAQ,CAAZ;;AAEA,IAAI,iBAAiB,CAArB;;AAEA,IAAI,iBAAiB,CAArB;;AAEA,IAAI,aAAa,IAAjB;AACA,IAAI,OAAO,UAAX;AACA,IAAI,gBAAgB,UAApB;;AAKA,IAAM,YAAY,SAAZ,SAAY,CAAC,MAAD,EAAY;AAC1B,YAAQ,CAAR;AACA,qBAAiB,CAAjB;AACA,cAAU,MAAV;AACA,UAAM,MAAN;AACH,CALD;AAMA,IAAM,QAAQ,SAAR,KAAQ,CAAC,MAAD,EAAY;AACtB,QAAI,mBAAS,cAAT,OAA8B,CAAlC,EAAqC;AACjC,yBAAiB,CAAjB;AACA,qBAAa,gBAAb;AACA,qBAAa,OAAb;AACA;AACH;;AAED,QAAI,UAAU,kBAAd;;AAEA,QAAI,YAAY,CAAhB,EAAmB;AACf,2BAAI,GAAJ,CAAQ,oBAAR;AACA,qBAAa,gBAAb;AACA,qBAAa,OAAb;AACA;AACH;;AAED,qBAAiB,CAAjB;AACA,WAAO,IAAP,CAAY,aAAZ,EAA2B,yBAAe;AACtC,gBAAQ;AAD8B,KAAf,CAA3B;;AAIA,WAAO,QAAQ,UAAf;AACA,QAAI,QAAQ,CAAZ,EAAe;AACX,wBAAgB,CAAC,QAAQ,CAAT,IAAc,IAA9B;AACH,KAFD,MAEO;AACH,wBAAgB,UAAhB;AACH;AACD,QAAI,OAAO,KAAX,EAAkB;AACd,eAAO,KAAP;AACH;AACD,aAAS,CAAT;AACA,uBAAI,GAAJ,CAAQ,gBAAgB,IAAxB;;AAEA,uBAAmB,WAAW,YAAW;AAErC,YAAI,mBAAmB,CAAvB,EAA0B;AACtB,6BAAiB,iBAAiB,CAAlC;AACA,oBAAQ,CAAR;AACA,+BAAI,GAAJ,CAAQ,iCAAiC,cAAzC;AACA,gBAAI,kBAAkB,CAAtB,EAAyB;AACrB,iCAAiB,CAAjB;AACH;AACJ;AACJ,KAVkB,EAUhB,aAVgB,CAAnB;;AAYA,cAAU,WAAW,YAAW;AAC5B,cAAM,MAAN;AACH,KAFS,EAEP,IAFO,CAAV;AAIH,CAlDD;;AAoDA,IAAM,YAAY,SAAZ,SAAY,CAAC,MAAD,EAAY;AAE1B,WAAO,EAAP,CAAU,aAAV,EAAyB,UAAS,IAAT,EAAe;AACpC,yBAAiB,KAAK,MAAtB;AACH,KAFD;AAGH,CALD;;AAUA,IAAM,mBAAmB,SAAnB,gBAAmB,GAAM;AAC3B,WAAO,qBAAW,YAAX,CAAwB,iBAAM,eAA9B,EAA+C,SAA/C,CAAyD,iBAAM,qBAA/D,CAAP;AACH,CAFD;AAGA,IAAM,mBAAmB,SAAnB,gBAAmB,CAAC,MAAD,EAAY;AACjC,yBAAW,YAAX,CAAwB,iBAAM,eAA9B,EAA+C,SAA/C,CAAyD,iBAAM,qBAA/D,EAAsF,MAAtF;AACH,CAFD;;kBAIe;AACX,wBADW;AAEX,sCAFW;AAGX;AAHW,C","file":"socketUtils.js","sourceRoot":"C:/Users/dell/AppData/Roaming/HBuilder/userprofiles/18710095921@163.com/jxddH5PlusApp/unpackage","sourcesContent":["'use strict';\r\n/**\r\n * @file 此js文件用于处理socket通信\r\n * @Author liyubai\r\n * 使用方法：import socketUtils from 'common/socketUtils'\r\n */\r\n\r\nimport muiUtils from './muiUtils';\r\nimport api from 'api';\r\nimport CONST from 'common/consts';\r\nimport utils from 'common/utils';\r\nimport cacheUtils from 'common/cacheUtils';\r\nimport log from 'common/logUtils';\r\n// 心跳循环对象\r\nvar timeout;\r\nvar listeningTimeout;\r\n// 心跳计数器\r\nvar count = 1;\r\n// 心跳监听\r\nvar heartListening = 0;\r\n// 心跳监听连接失败计数器\r\nvar heartFailCount = 0;\r\n// 心跳请求间隔时间\r\nvar defineTime = 5000;\r\nvar time = defineTime;\r\nvar listeningTime = defineTime;\r\n\r\n/**\r\n * 初始化心跳机制\r\n */\r\nconst initHeart = (socket) => {\r\n    count = 1;\r\n    heartFailCount = 0;\r\n    heartBack(socket);\r\n    heart(socket);\r\n};\r\nconst heart = (socket) => {\r\n    if (muiUtils.getNetworkType() === 1) {\r\n        setConnectStatus(3);\r\n        clearTimeout(listeningTimeout);\r\n        clearTimeout(timeout);\r\n        return;\r\n    }\r\n\r\n    var connect = getConnectStatus();\r\n    // log.log(\"heart connect status:\"+connect);\r\n    if (connect === 2) {\r\n        log.log('通信连接建立失败，需要手动刷新连接！');\r\n        clearTimeout(listeningTimeout);\r\n        clearTimeout(timeout);\r\n        return;\r\n    }\r\n\r\n    heartListening = 0;\r\n    socket.emit('onHeartBeat', JSON.stringify({\r\n        status: 0\r\n    }));\r\n\r\n    time = count * defineTime;\r\n    if (count > 1) {\r\n        listeningTime = (count - 1) * 1000;\r\n    } else {\r\n        listeningTime = defineTime;\r\n    }\r\n    if (time > 60000) {\r\n        time = 60000;\r\n    }\r\n    count += 1;\r\n    log.log('heart time:' + time);\r\n\r\n    listeningTimeout = setTimeout(function() {\r\n        // log.log(\"heard listening: \"+heartListening);\r\n        if (heartListening === 0) {\r\n            heartFailCount = heartFailCount + 1;\r\n            count = 1;\r\n            log.log('heard listening fail count: ' + heartFailCount);\r\n            if (heartFailCount >= 5) {\r\n                setConnectStatus(2);\r\n            }\r\n        }\r\n    }, listeningTime);\r\n\r\n    timeout = setTimeout(function() {\r\n        heart(socket);\r\n    }, time);\r\n\r\n};\r\n\r\nconst heartBack = (socket) => {\r\n    // 心跳回调监听方法\r\n    socket.on('onHeartBeat', function(data) {\r\n        heartListening = data.status;\r\n    });\r\n};\r\n\r\n/**\r\n * 连接状态操作方法\r\n */\r\nconst getConnectStatus = () => {\r\n    return cacheUtils.localStorage(CONST.IMCHAT_PURCHASE).getObject(CONST.IMCHAT_CONNECT_STATUS);\r\n};\r\nconst setConnectStatus = (status) => {\r\n    cacheUtils.localStorage(CONST.IMCHAT_PURCHASE).setObject(CONST.IMCHAT_CONNECT_STATUS, status);\r\n};\r\n\r\nexport default {\r\n    initHeart,\r\n    getConnectStatus,\r\n    setConnectStatus\n};\n"]}