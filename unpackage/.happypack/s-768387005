'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var ISO8601_FORMAT = 'yyyy-MM-dd hh:mm:ss.SSS';
var ISO8601_WITH_TZ_OFFSET_FORMAT = 'yyyy-MM-ddThh:mm:ssO';
var DATETIME_FORMAT = 'dd MM yyyy hh:mm:ss.SSS';
var ABSOLUTETIME_FORMAT = 'hh:mm:ss.SSS';

function padWithZeros(vNumber, width) {
    var numAsString = vNumber + '';
    while (numAsString.length < width) {
        numAsString = '0' + numAsString;
    }
    return numAsString;
}

function addZero(vNumber) {
    return padWithZeros(vNumber, 2);
}

function offset(timezoneOffset) {
    var os = Math.abs(timezoneOffset);
    var h = String(Math.floor(os / 60));
    var m = String(os % 60);
    if (h.length === 1) {
        h = '0' + h;
    }
    if (m.length === 1) {
        m = '0' + m;
    }
    return timezoneOffset < 0 ? '+' + h + m : '-' + h + m;
}

var dateFormat = function dateFormat(date, format, timezoneOffset) {
    if (typeof date === 'string' || typeof date === 'number') {
        date = new Date(arguments[0]);
        format = arguments[1];
        timezoneOffset = arguments[2];
    }
    if (format === undefined) {
        format = ISO8601_FORMAT;
    }
    if (timezoneOffset === undefined) {
        timezoneOffset = date.getTimezoneOffset();
    }
    date.setUTCMinutes(date.getUTCMinutes() - timezoneOffset);
    var vDay = addZero(date.getUTCDate());
    var vMonth = addZero(date.getUTCMonth() + 1);
    var vYearLong = addZero(date.getUTCFullYear());
    var vYearShort = addZero(date.getUTCFullYear().toString().substring(2, 4));
    var vYear = format.indexOf('yyyy') > -1 ? vYearLong : vYearShort;
    var vHour = addZero(date.getUTCHours());
    var vMinute = addZero(date.getUTCMinutes());
    var vSecond = addZero(date.getUTCSeconds());
    var vMillisecond = padWithZeros(date.getUTCMilliseconds(), 3);
    var vTimeZone = offset(timezoneOffset);
    date.setUTCMinutes(date.getUTCMinutes() + timezoneOffset);
    var formatted = format.replace(/dd/g, vDay).replace(/MM/g, vMonth).replace(/y{1,4}/g, vYear).replace(/hh/g, vHour).replace(/mm/g, vMinute).replace(/ss/g, vSecond).replace(/SSS/g, vMillisecond).replace(/O/g, vTimeZone);
    return formatted;
};

var diffTime = function diffTime(item) {
    var nowTime = new Date().getTime();
    var secondTime = 1000;
    var minuteTime = 60 * 1000;
    var hourTime = 60 * minuteTime;
    var dayTime = 24 * hourTime;
    var monthTime = dayTime * 30;
    var yearTime = monthTime * 12;

    var publishTime = new Date(item).getTime();
    var historyTime = parseInt(nowTime) - parseInt(publishTime);
    var descTime;
    if (historyTime >= yearTime) {
        descTime = parseInt(historyTime / yearTime) + '年前';
    } else if (historyTime < yearTime && historyTime >= monthTime) {
        descTime = parseInt(historyTime / monthTime) + '月前';
    } else if (historyTime < monthTime && historyTime >= dayTime) {
        descTime = parseInt(historyTime / dayTime) + '天前';
    } else if (historyTime < dayTime && historyTime >= hourTime) {
        descTime = parseInt(historyTime / hourTime) + '小时前';
    } else if (historyTime < hourTime && historyTime >= minuteTime) {
        descTime = parseInt(historyTime / minuteTime) + '分钟前';
    } else {
        descTime = parseInt(historyTime / secondTime) + '秒前';;
    }
    return descTime;
};

exports.default = {
    diffTime: diffTime,
    dateFormat: dateFormat,
    ISO8601_FORMAT: ISO8601_FORMAT,
    ISO8601_WITH_TZ_OFFSET_FORMAT: ISO8601_WITH_TZ_OFFSET_FORMAT,
    DATETIME_FORMAT: DATETIME_FORMAT,
    ABSOLUTETIME_FORMAT: ABSOLUTETIME_FORMAT
};