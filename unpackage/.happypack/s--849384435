'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageLocalPath = exports.getFileSize = exports.delAllFile = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _consts = require('common/consts');

var _logUtils = require('common/logUtils');

var _logUtils2 = _interopRequireDefault(_logUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var asyncPath = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(imgUrl, dataName) {
    var relativePath, locaPath;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            relativePath = _consts.RALATIVE_PATH + dataName + '_' + imgUrl.split('/').pop();
            _context.next = 3;
            return resolveLocalFileSystemURL(relativePath);

          case 3:
            locaPath = _context.sent;

            console.log('locaPath:::' + locaPath);

            if (!(locaPath === undefined)) {
              _context.next = 9;
              break;
            }

            _context.next = 8;
            return getImgFromNet(imgUrl, relativePath);

          case 8:
            locaPath = _context.sent;

          case 9:
            return _context.abrupt('return', locaPath);

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function asyncPath(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var getImageLocalPath = function getImageLocalPath(imgUrl, index, dataName, cb) {
  var reg = /\.(png|jpe?g|gif|svg)(\?.*)?$/;
  if (imgUrl === undefined || imgUrl == null || imgUrl.indexOf('/') === -1 || !reg.test(imgUrl)) {
    cb(_consts.IMG_PLACEHOLD_PATH, index, dataName);
    return;
  }
  asyncPath(imgUrl, dataName).then(function (value) {
    cb(value, index, dataName);
  }).catch(function (err) {
    _logUtils2.default.log('err:' + err.stack, 'getImageLocalPath asyncPath() error');
  });
};

var resolveLocalFileSystemURL = function resolveLocalFileSystemURL(path) {
  return new _promise2.default(function (resolve, reject) {
    plus.io.resolveLocalFileSystemURL(path, function (entry) {
      resolve(plus.io.convertLocalFileSystemURL(path));
    }, function (e) {
      reject(e);
    });
  }).catch(function (err) {
    _logUtils2.default.log(path + 'resolveLocalFileSystemURL fail:' + err.stack, 'resolveLocalFileSystemURL() error');
  });
};

var getImgFromNet = function getImgFromNet(url, path) {
  return new _promise2.default(function (resolve, reject) {
    plus.downloader.createDownload(url, {
      timeout: 5,
      retry: 0,
      filename: path
    }, function (d, status) {
      if (status === 200) {
        resolve(plus.io.convertLocalFileSystemURL(path));
      } else {
        _logUtils2.default.log('download fail!' + path, 'getImgFromNet() error');
        reject(path);
      }
    }).start();
  }).catch(function (path) {
    delFile(path);
  });
};

var delFile = function delFile(relativePath) {
  plus.io.resolveLocalFileSystemURL(relativePath, function (entry) {
    entry.remove(function (entry) {
      _logUtils2.default.log('delFile sucess==' + relativePath, 'delFile() error');
    }, function (e) {
      _logUtils2.default.log('delFile fail==' + relativePath, 'delFile() error');
    });
  });
};

var delAllFile = function delAllFile() {
  plus.io.resolveLocalFileSystemURL(_consts.RALATIVE_PATH, function (entry) {
    entry.removeRecursively(function (entry) {
      _logUtils2.default.log('delAllFile sucess==' + _consts.RALATIVE_PATH, 'delAllFile() error');
    }, function (e) {
      _logUtils2.default.log('delAllFile fail==' + _consts.RALATIVE_PATH, 'delAllFile() error');
    });
  });
};

var getFileSize = function getFileSize(func) {
  plus.io.resolveLocalFileSystemURL(_consts.RALATIVE_PATH, function (entry) {
    entry.getMetadata(function (metadata) {
      func(metadata.size);
    }, function (e) {
      _logUtils2.default.log(e.message, 'getFileSize() error');
    }, false);
  });
};

exports.default = {
  delAllFile: delAllFile,
  getFileSize: getFileSize,
  getImageLocalPath: getImageLocalPath
};
exports.delAllFile = delAllFile;
exports.getFileSize = getFileSize;
exports.getImageLocalPath = getImageLocalPath;