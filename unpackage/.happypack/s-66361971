'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sessionStorage = exports.cookie = exports.localStorage = undefined;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _consts = require('./consts');

var _consts2 = _interopRequireDefault(_consts);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sessionStorage = function sessionStorage(prefix) {
    var set = function set(key, val) {
        key = prefix + '_' + key;
        if (!window.sessionStorage) {
            window.alert('Your browser not support localStorage. Please check set browser private model.');
            return;
        }
        try {
            window.sessionStorage.setItem(key, val);
        } catch (e) {
            window.console.warn('Your browser not support localStorage. ' + e);
            window.alert('Your browser not support localStorage. Please check set browser private model.');
        }
    };

    var get = function get(key) {
        key = prefix + '_' + key;
        return window.sessionStorage.getItem(key);
    };
    return {
        set: set,
        get: get,

        setObject: function setObject(key, val) {
            val = (0, _stringify2.default)(val);
            set(key, val);
        },

        getObject: function getObject(key) {
            var result = get(key);
            var json = null;
            if (!result) {
                return undefined;
            } else {
                try {
                    json = JSON.parse(result);
                } catch (e) {
                    console.log('缓存数据解决json异常!');
                }
                return json;
            }
        },

        del: function del(key) {
            key = prefix + '_' + key;
            window.sessionStorage.removeItem(key);
        },

        clear: function clear() {
            window.sessionStorage.clear();
        },

        key: function key(i) {
            i = i || 0;
            return (0, _keys2.default)(window.sessionStorage)[i];
        },

        keys: function keys() {
            return (0, _keys2.default)(window.sessionStorage);
        },

        values: function values() {
            return (0, _values2.default)(window.sessionStorage);
        },

        length: function length() {
            return (0, _keys2.default)(window.sessionStorage).length;
        }
    };
};

var localStorage = function localStorage(prefix) {
    var set = function set(key, val) {
        key = prefix + '_' + key;
        if (!window.localStorage) {
            window.alert('Your browser not support localStorage. Please check set browser private model.');
            return;
        }
        try {
            window.localStorage.setItem(key, val);
        } catch (e) {
            window.console.warn('Your browser not support localStorage. ' + e);
            window.alert('Your browser not support localStorage. Please check set browser private model.');
        }
    };

    var get = function get(key) {
        key = prefix + '_' + key;
        return window.localStorage.getItem(key) === 'null' ? '' : window.localStorage.getItem(key);
    };
    return {

        set: set,
        get: get,

        setObject: function setObject(key, val) {
            val = (0, _stringify2.default)(val);
            set(key, val);
        },

        getObject: function getObject(key) {
            var result = get(key);
            var json = null;
            if (!result) {
                return undefined;
            } else {
                try {
                    json = JSON.parse(result);
                } catch (e) {
                    console.log('缓存数据解决json异常!');
                }
                return json;
            }
        },

        del: function del(key) {
            key = prefix + '_' + key;
            window.localStorage.removeItem(key);
        },

        clear: function clear() {
            var instanceId = window.localStorage.getItem(_consts2.default.PREFIX_LOGIN + '_' + _consts2.default.APP_INSTANCE_ID);
            window.localStorage.clear();
            window.localStorage.setItem(_consts2.default.PREFIX_LOGIN + '_' + _consts2.default.APP_INSTANCE_ID, instanceId === undefined ? '' : instanceId);
            cookie.clear();
            window.sessionStorage.clear();
        },

        key: function key(i) {
            i = i || 0;
            return (0, _keys2.default)(window.localStorage)[i];
        },

        keys: function keys() {
            return (0, _keys2.default)(window.localStorage);
        },

        values: function values() {
            return (0, _values2.default)(window.localStorage);
        },

        length: function length() {
            return (0, _keys2.default)(window.localStorage).length;
        }
    };
};

var cookie = {
    set: function set(key, val, time, domain) {
        var exp = new Date();
        var t = !time ? exp.getTime() + 2592000000 : exp.getTime() + time;
        exp.setTime(t);

        if (domain === true) {
            domain = document.domain.replace(/[a-zA-Z]+/, '');
        }
        var extr = domain ? ';domain=' + domain + ';path=/' : '';
        document.cookie = key + '=' + escape(val) + ';expires=' + exp.toGMTString() + extr;
    },

    get: function get(key) {
        var reg = new RegExp('(^| )' + key + '=([^;]*)(;|$)');
        var arr = document.cookie.match(reg);
        return arr ? unescape(arr[2]) : '';
    },

    setObject: function setObject(key, val, time, domain) {
        val = (0, _stringify2.default)(val);
        var exp = new Date();
        var t = !time ? exp.getTime() + 2592000000 : exp.getTime() + time;
        exp.setTime(t);

        if (domain === true) {
            domain = document.domain.replace(/[a-zA-Z]+/, '');
        }
        var extr = domain ? ';domain=' + domain + ';path=/' : '';
        document.cookie = key + '=' + escape(val) + ';expires=' + exp.toGMTString() + extr;
    },

    getObject: function getObject(key) {
        var reg = new RegExp('(^| )' + key + '=([^;]*)(;|$)');
        var arr = document.cookie.match(reg);
        var json = null;
        try {
            json = JSON.parse(arr ? unescape(arr[2]) : '');
        } catch (e) {
            console.log('缓存数据解决json异常!');
        }
        return json;
    },

    del: function del(key, domain) {
        var exp = new Date();
        exp.setTime(exp.getTime() - 1);
        var cval = undefined.get(key);

        if (domain === true) {
            domain = document.domain.replace(/[a-zA-Z]+/, '');
        }
        var extr = domain ? ';domain=' + domain + ';path=/' : '';
        if (cval) {
            document.cookie = key + '=1;expires=' + exp.toGMTString() + extr;
        }
    },

    clear: function clear() {
        var keys = document.cookie.match(/[^ =;]+(?==)/g);
        if (!keys || !keys.length) return;
        for (var i = keys.length; i--;) {
            document.cookie = keys[i] + '=0;expires=Thu, 01 Jan 1970 00:00:00 GMT;';
        }
    }
};

exports.default = {
    localStorage: localStorage,
    cookie: cookie,
    sessionStorage: sessionStorage
};
exports.localStorage = localStorage;
exports.cookie = cookie;
exports.sessionStorage = sessionStorage;