{"version":3,"sources":["src\\common\\validatorUtils.js"],"names":[],"mappings":"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","file":"validatorUtils.js","sourceRoot":"C:/Users/dell/AppData/Roaming/HBuilder/userprofiles/18710095921@163.com/jxddH5PlusApp/unpackage","sourcesContent":["'use strict';\r\n/*!\r\n * validatorUtils.js v1.0.0\r\n * 验证工具类,提供各种工具方法，会陆续添加\r\n *\n * Author: liaoxm\r\n * Date: 2016-06-20\r\n */\r\n\r\nconst REGEX_RULE = {\r\n  //  email:/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n  // 匹配email\r\n    email: /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\r\n  // 匹配url\r\n    url: /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i,\r\n  // 日期格式验证1990-06-06，1990/06/06\r\n    dateISO: /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/,\r\n  // 各种数字串，123.000,00，123，-123，-123,000.00\r\n    number: /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/,\r\n  // 纯数字\r\n    digits: /^\\d+$/,\r\n  // 匹配ipv4\n    ip: /^(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/i,\r\n  // 匹配手机号码，可能往后第二位还会变化，简单的方法就是不验证第二位：/^1[0-9]{10}$/\r\n    mobilephone: /^1[3|4|5|7|8][0-9]{9}$/,\r\n  // 匹配国内电话号码,/^[0][1-9]{2,3}-[0-9]{5,10}$/\r\n    telphone: /^d{3}-d{8}|d{4}-d{7}$/,\r\n  // 匹配中文\r\n    zhstr: /^[u4e00-u9fa5]$/,\r\n  // 匹配首位空格，可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)\r\n    spacestr: /^s*|s*$/,\r\n  // 匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)\r\n    accountstr: /^[a-zA-Z][a-zA-Z0-9_]{4,15}$/,\r\n  // 匹配中国邮政编码\r\n    postcard: /(^[1-9]\\d{5}$)|0{6}/,\r\n  // 匹配身份证：d{15}|d{18}\r\n    identitycode: /^\\d{6}(18|19|20)?\\d{2}(0[1-9]|1[12])(0[1-9]|[12]\\d|3[01])\\d{3}(\\d|X)$/i,\r\n  // 时间，24小时制\r\n    time: /^([01]\\d|2[0-3]|[0-9])(:[0-5]\\d){1,2}$/,\r\n  // 时间，十二小时制\r\n    time12h: /^((0?[1-9]|1[012])(:[0-5]\\d){1,2}(\\?[AP]M))$/i,\r\n  // 验证用户名\r\n    username: /^[a-z0-9_\\-\\u4e00-\\u9fa5]{3,15}$/i,\r\n  // 验证密码\r\n    passwd: /^[\\x21-\\x7E]{8,20}$/i,\n  // 中英文字符数字\n    zhennumstr: /^[\\u4e00-\\u9fa5_a-zA-Z0-9]+$/,\n  // 中英文字符数字,/、*\n  // zhennumstr1: /^[\\u4e00-\\u9fa5_a-zA-Z0-9\\/\\*]+$/\n    zhennumstr1: /^[\\u4e00-\\u9fa5_a-zA-Z]+$/\n};\r\n\r\n/**\r\n * email验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst email = text => {\r\n    return REGEX_RULE.email.test(text);\r\n};\r\n\r\n/**\r\n * url验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst url = text => {\r\n    return REGEX_RULE.url.test(text);\r\n};\r\n\r\n/**\r\n * dateISO验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst dateISO = text => {\r\n    return REGEX_RULE.dateISO.test(text);\r\n};\r\n\r\n/**\r\n * 数字验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst number = text => {\r\n    return REGEX_RULE.number.test(text);\r\n};\r\n\r\n/**\r\n * 纯数字验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst digits = text => {\r\n    return REGEX_RULE.digits.test(text);\r\n};\r\n\r\n/**\r\n * ipv4验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst ip = text => {\r\n    return REGEX_RULE.ip.test(text);\r\n};\r\n\r\n/**\r\n * 手机号码验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst mobilephone = text => {\r\n    return REGEX_RULE.mobilephone.test(text);\r\n};\r\n\r\n/**\r\n * 座机号码验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst telphone = text => {\r\n    return REGEX_RULE.telphone.test(text);\r\n};\r\n\r\n/**\r\n * 中文验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst zhstr = text => {\r\n    return REGEX_RULE.zhstr.test(text);\r\n};\r\n\r\n/**\r\n * 首位空格验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst spacestr = text => {\r\n    return REGEX_RULE.spacestr.test(text);\r\n};\r\n\r\n/**\r\n * 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst accountstr = text => {\r\n    return REGEX_RULE.accountstr.test(text);\r\n};\r\n\r\n/**\r\n * 6位邮政编码验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst postcard = text => {\r\n    return REGEX_RULE.postcard.test(text);\r\n};\r\n\r\n/**\r\n * 身份证验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst identitycode = text => {\r\n    return REGEX_RULE.identitycode.test(text);\r\n};\r\n\r\n/**\r\n * time验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst time = text => {\r\n    return REGEX_RULE.time.test(text);\r\n};\r\n\r\n/**\r\n * time12h验证器\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst time12h = text => {\r\n    return REGEX_RULE.time12h.test(text);\r\n};\r\n\r\n/**\r\n * 输入的字符串是否能转成合法的日期\r\n * @param {String} text   需要验证的字符串\r\n * @return {Boolean} 验证结果\r\n * @public\r\n */\r\nconst datestr = text => {\r\n    return !/Invalid|NaN/.test(new Date(text).toString());\n};\r\n\r\nconst passwd = text => {\r\n    return REGEX_RULE.passwd.test(text);\n};\r\nconst username = text => {\r\n    return REGEX_RULE.username.test(text);\r\n};\n\nconst isEmpty = text => {\n    if (text == null || text === '' || text.trim() === '') {\n        return true;\n    }\n    return false;\n};\n\nconst zhennumStr = text => {\n    return REGEX_RULE.zhennumstr.test(text);\n};\n\nconst zhennumStr1 = text => {\n    return REGEX_RULE.zhennumstr1.test(text);\n};\n\nexport default {\r\n    REGEX_RULE,\r\n    email,\r\n    url,\r\n    dateISO,\r\n    number,\r\n    digits,\r\n    ip,\r\n    mobilephone,\r\n    telphone,\r\n    zhstr,\r\n    spacestr,\r\n    accountstr,\r\n    postcard,\r\n    identitycode,\r\n    time,\r\n    time12h,\r\n    datestr,\r\n    username,\r\n    passwd,\n    isEmpty,\n    zhennumStr,\n    zhennumStr1\n};\n"]}