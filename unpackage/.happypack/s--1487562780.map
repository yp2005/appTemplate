{"version":3,"sources":["src\\common\\logUtils.js"],"names":[],"mappings":"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","file":"logUtils.js","sourceRoot":"C:/Users/dell/AppData/Roaming/HBuilder/userprofiles/18710095921@163.com/jxddH5PlusApp/unpackage","sourcesContent":["'use strict';\r\n/*!\r\n * logUtils.js v1.0.0\r\n * 日志工具类\r\n *\r\n * Author: liaoxm\r\n * Date: 2016-06-16\r\n *\r\n */\r\nimport dateFormat from './dateFormat';\r\nimport prop from './propUtils';\r\n// import muiUtils from './muiUtils';\nlet logLevel = 0; // 日志级别，0:'log',1:'debug',2:'info',3:'error',4:'warn'\r\nlet logonoff = 0; // 默认是开启日志的\r\nlet writeonoff = 0; // 服务器写日志开关 0-开启 1-关闭\nlet writeurl = 'http://192.168.2.61:8888/api/facade/log/write'; // 写日志服务器URL\r\n/**\r\n * 日志工具类封装\r\n * @param {Object} sMethod\r\n * @param {Object} aArgs\r\n * @private\r\n */\r\nfunction doLog(sMethod, aArgs) {\r\n    if (logonoff === 1) {\r\n        return;\r\n    }\r\n    console.log(aArgs);\r\n  //  if(navigator.userAgent.toLowerCase().indexOf('msie') > -1){\r\n  //      Function.apply.apply(console[sMethod], [console, aArgs]);\r\n  //  }else{\r\n  //      console[sMethod].apply(console,aArgs);\r\n  //  }\r\n  // 往控制台输出日志，上面代码在手机端执行有点问题，直接console处理了\r\n    if (writeonoff === 0) {\r\n        var imei = plus.device.imei;\r\n        var imsi = plus.device.imsi;\r\n        var model = plus.device.model;\r\n        var vendor = plus.device.vendor;\r\n        var uuid = plus.device.uuid;\r\n        mui.ajax(writeurl, {\r\n            data: {\r\n                imei: imei,\r\n                imsi: imsi,\r\n                model: model,\r\n                vendor: vendor,\r\n                uuid: uuid,\r\n                loginfo: aArgs.toString()\r\n            },\r\n            type: 'post',\r\n            success: () => {\n            },\r\n            error: (xhr, type, errorThrown) => {\r\n                console.log('server write log error');\r\n            },\r\n            inspect: () => {\n            },\r\n            complete: () => {\n            }\r\n        });\r\n    }\n}\r\n/**\r\n * 日志工具类\r\n * @param {String} sModule\r\n */\r\nconst Logger = function(sModule) {\r\n  // 读取配置文件，配置日志情况\r\n    logonoff = prop.getLogProp('logonoff');\r\n    logLevel = prop.getLogProp('loglevel');\r\n    let _name = sModule;\r\n    var methods = ['log', 'debug', 'info', 'error', 'warn'];\r\n    for (var i = 0, len = methods.length; i < len; i++) {\r\n        (function(method) {\r\n            Logger.prototype[method] = function() {\r\n                var sDate = '[' + dateFormat.dateFormat(new Date()) + ']';\r\n                var aArgs = Array.prototype.slice.call(arguments, 0);\r\n                aArgs.unshift(sDate);\r\n                aArgs.push('(' + method + ' ' + _name + ')');\r\n                doLog(method, aArgs);\r\n            };\r\n        })(methods[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * 日志工具类log\r\n * @param {String} log 需要输出的内容\r\n * @param {String} moduleName 模块名称，这里因为没有办法自动获取，所以就请手动添加，一般就写文件名称和行数\r\n * @public\r\n */\r\nconst log = (log, moduleName) => {\r\n    if (logLevel >= 0) {\r\n        (new Logger(moduleName)).log(log);\r\n    }\r\n};\r\n/**\r\n * 日志工具类debug\r\n * @param {String} log 需要输出的内容\r\n * @param {String} moduleName 模块名称，这里因为没有办法自动获取，所以就请手动添加，一般就写文件名称和行数\r\n * @public\r\n */\r\nconst debug = (log, moduleName) => {\r\n    if (logLevel >= 1) {\r\n        (new Logger(moduleName)).debug(log);\r\n    }\r\n};\r\n/**\r\n * 日志工具类info\r\n * @param {String} log 需要输出的内容\r\n * @param {String} moduleName 模块名称，这里因为没有办法自动获取，所以就请手动添加，一般就写文件名称和行数\r\n * @public\r\n */\r\nconst info = (log, moduleName) => {\r\n    if (logLevel >= 2) {\r\n        (new Logger(moduleName)).info(log);\r\n    }\r\n};\r\n/**\r\n * 日志工具类error\r\n * @param {String} log 需要输出的内容\r\n * @param {String} moduleName 模块名称，这里因为没有办法自动获取，所以就请手动添加，一般就写文件名称和行数\r\n * @public\r\n */\r\nconst error = (log, moduleName) => {\r\n    if (logLevel >= 3) {\r\n        (new Logger(moduleName)).error(log);\r\n    }\r\n};\r\n/**\r\n * 日志工具类warn\r\n * @param {String} log 需要输出的内容\r\n * @param {String} moduleName 模块名称，这里因为没有办法自动获取，所以就请手动添加，一般就写文件名称和行数\r\n * @public\r\n */\r\nconst warn = (log, moduleName) => {\r\n    if (logLevel >= 4) {\r\n        (new Logger(moduleName)).warn(log);\r\n    }\r\n};\r\n\r\nexport default {\r\n    log,\r\n    debug,\r\n    info,\r\n    error,\r\n    warn\n};\r\n"]}