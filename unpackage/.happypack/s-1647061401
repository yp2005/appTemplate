'use strict';

(function ($, window, document) {
    var STATE_BEFORECHANGEOFFSET = 'beforeChangeOffset';
    var STATE_AFTERCHANGEOFFSET = 'afterChangeOffset';

    var EVENT_PULLSTART = 'pullstart';
    var EVENT_PULLING = 'pulling';
    var EVENT_BEFORECHANGEOFFSET = STATE_BEFORECHANGEOFFSET;
    var EVENT_AFTERCHANGEOFFSET = STATE_AFTERCHANGEOFFSET;
    var EVENT_DRAGENDAFTERCHANGEOFFSET = 'dragEndAfterChangeOffset';

    var CLASS_TRANSITIONING = $.className('transitioning');
    var CLASS_PULL_TOP_TIPS = $.className('pull-top-tips');
    var CLASS_PULL_DOWN_TIPS = $.className('pull-down-tips');
    var CLASS_PULL_BOTTOM_TIPS = $.className('pull-bottom-tips');
    var CLASS_PULL_LOADING = $.className('pull-loading');
    var CLASS_SCROLL = $.className('scroll');

    var CLASS_PULL_TOP_ARROW = $.className('pull-loading') + ' ' + $.className('icon') + ' ' + $.className('icon-pulldown');
    var CLASS_PULL_TOP_ARROW_REVERSE = CLASS_PULL_TOP_ARROW + ' ' + $.className('reverse');
    var CLASS_PULL_TOP_SPINNER = $.className('pull-loading') + ' ' + $.className('spinner');
    var CLASS_HIDDEN = $.className('hidden');
    var SCROLL_Y = 0;

    var SELECTOR_PULL_LOADING = '.' + CLASS_PULL_LOADING;
    var currentWebview = null;
    var firstLoad = true;
    mui.plusReady(function () {
        currentWebview = plus.webview.currentWebview();
    });

    $.PullToRefresh = $.Class.extend({
        init: function init(element, options) {
            this.element = element;
            this.scroll = mui(this.element.parentNode).scroll();
            this.options = $.extend(true, {
                down: {
                    auto: false,
                    height: 75,
                    offset: 50,
                    callback: false,
                    pullDownTipStyle: 'topLoading',
                    contentdefault: '下拉可以刷新',
                    contentdragdown: '释放立即刷新',
                    contentloading: '正在刷新...',
                    tipColor: '#777777'
                },
                up: {
                    auto: false,
                    offset: 50,
                    show: true,
                    contentdown: '上拉显示更多',
                    contentrefresh: '正在加载...',
                    contentnomore: '没有更多数据了',
                    callback: false
                },
                preventDefaultException: {
                    tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/
                }
            }, options);
            this.stopped = this.isNeedRefresh = this.isDragging = false;
            this.state = STATE_BEFORECHANGEOFFSET;
            this.isInScroll = this.element.classList.contains(CLASS_SCROLL);
            $.isFunction(this.options.up.callback) && this.initGotoTopB();
            this.initPullUpTips();
            this.initPullDownTopTips();
            this.initEvent();
            this.element.style.minHeight = '101%';
            this.element.style.backgroundColor = '#f3f5f7';
        },
        initGotoTopB: function initGotoTopB() {
            var sef = this;
            var gotoTopB = document.createElement('div');
            gotoTopB.id = 'gotoTopB';
            gotoTopB.style.display = 'none';
            gotoTopB.style.position = 'absolute';
            gotoTopB.style.right = '10px';
            gotoTopB.style.bottom = '10px';
            gotoTopB.style.height = '40px';
            gotoTopB.style.width = '40px';
            gotoTopB.style.fontSize = '20px';
            gotoTopB.style.borderRadius = '20px';
            gotoTopB.style.lineHeight = '35px';
            gotoTopB.style.color = '#000000';
            gotoTopB.style.zIndex = '2';
            gotoTopB.style.background = '#ffffff';
            gotoTopB.style.opacity = '0.6';
            gotoTopB.style.border = '1px solid #666666';
            gotoTopB.innerHTML = '<span class="icon-fanhuidingbu jxddicon" style="margin-left: 9px"></span>';
            gotoTopB.addEventListener('tap', function () {
                sef.scroll.scrollTo(0, 0, 300);
            });
            this.element.parentNode.appendChild(gotoTopB);
        },
        initPullDownTopTips: function initPullDownTopTips() {
            if ($.isFunction(this.options.down.callback)) {
                var element = this.element.querySelector('.' + CLASS_PULL_DOWN_TIPS);
                if (!element) {
                    element = document.createElement('div');
                    element.classList.add(CLASS_PULL_DOWN_TIPS);
                    element.innerHTML = '<div class="mui-pull"><div id="topTipIcon" class="mui-pull-loading mui-icon mui-icon-pulldown"></div><div id="topTipText" class="mui-pull-caption">' + this.options.down.contentdefault + '</div></div>';
                    element.style.height = '40px';
                    element.style.width = '100%';
                    element.style.position = 'absolute';
                    element.style.top = '-40px';
                    var topTipIcon = element.querySelector('#topTipIcon');
                    var topTipText = element.querySelector('#topTipText');
                    topTipIcon.style.webkitTransition = '-webkit-transform 0.3s ease-in';
                    topTipIcon.style.webkitTransform = 'rotate(0deg)';
                    topTipIcon.style.color = this.options.down.tipColor;
                    topTipText.style.color = this.options.down.tipColor;
                    this.element.appendChild(element);
                }
            }
        },
        _preventDefaultException: function _preventDefaultException(el, exceptions) {
            for (var i in exceptions) {
                if (exceptions[i].test(el[i])) {
                    return true;
                }
            }
            return false;
        },
        initEvent: function initEvent() {
            if ($.isFunction(this.options.down.callback)) {
                this.element.addEventListener($.EVENT_START, this);
                this.element.addEventListener('drag', this);
                this.element.addEventListener('dragend', this);
            }
            if (this.pullUpTips) {
                this.element.addEventListener('dragup', this);
                if (this.isInScroll) {
                    this.element.addEventListener('scrollbottom', this);
                } else {
                    window.addEventListener('scroll', this);
                }
            }
            if ($.isFunction(this.options.up.callback)) {
                var sef = this;
                this.element.addEventListener('scroll', function () {

                    var scrollId = sef.element.parentNode.getAttribute('data-scroll');
                    var scrollApi = $.data[scrollId];
                    if (scrollApi.y < 0 && Math.abs(scrollApi.y) > sef.element.parentNode.scrollHeight / 3) {
                        sef.element.parentNode.querySelector('#gotoTopB').style.display = 'inline';
                    } else {
                        sef.element.parentNode.querySelector('#gotoTopB').style.display = 'none';
                    }
                });
            }
        },
        dealTopTip: function dealTopTip(e) {
            var scrollId = this.element.parentNode.getAttribute('data-scroll');
            var scrollApi = $.data[scrollId];
            SCROLL_Y = scrollApi.y;
            var element = this.element.querySelector('.' + CLASS_PULL_DOWN_TIPS);
            var topTipIcon = element.querySelector('.mui-pull-loading');
            var topTipText = element.querySelector('.mui-pull-caption');
            if (SCROLL_Y >= this.options.down.offset) {
                topTipIcon.style.webkitTransform = 'rotate(180deg)';
                topTipText.innerText = this.options.down.contentdragdown;
            } else {
                topTipIcon.style.webkitTransform = 'rotate(0deg)';
                topTipText.innerText = this.options.down.contentdefault;
            }
        },
        handleEvent: function handleEvent(e) {
            switch (e.type) {
                case 'drag':
                    this.dealTopTip(e);
                    break;
                case 'dragend':
                    this._dragend(e);
                    break;
                case 'webkitTransitionEnd':
                    this._transitionEnd(e);
                    break;
                case 'dragup':
                    this._dragup(e);
                    break;
            }
        },
        initPullDownTips: function initPullDownTips() {
            var self = this;
            if ($.isFunction(self.options.down.callback)) {
                self.pullDownTips = function () {
                    var element = document.querySelector('.' + CLASS_PULL_TOP_TIPS);
                    if (element) {
                        element.parentNode.removeChild(element);
                    }
                    if (!element) {
                        element = document.createElement('div');
                        element.classList.add(CLASS_PULL_TOP_TIPS);
                        element.innerHTML = '<div class="mui-pull-top-wrapper"><span class="mui-pull-loading mui-icon mui-icon-pulldown"></span></div>';
                        element.addEventListener('webkitTransitionEnd', self);
                    }
                    self.pullDownTipsIcon = element.querySelector(SELECTOR_PULL_LOADING);
                    document.body.appendChild(element);
                    return element;
                }();
            }
        },
        initPullUpTips: function initPullUpTips() {
            var self = this;
            if ($.isFunction(self.options.up.callback)) {
                self.pullUpTips = function () {
                    var element = self.element.querySelector('.' + CLASS_PULL_BOTTOM_TIPS);
                    if (!element) {
                        element = document.createElement('div');
                        element.classList.add(CLASS_PULL_BOTTOM_TIPS);
                        if (!self.options.up.show) {
                            element.classList.add(CLASS_HIDDEN);
                        }
                        element.innerHTML = '<div class="mui-pull-bottom-wrapper"><span class="mui-pull-loading">' + self.options.up.contentdown + '</span></div>';
                        self.element.style.paddingBottom = '41px';
                        element.style.position = 'absolute';
                        element.style.bottom = '0';
                        element.style.width = '100%';
                        self.element.appendChild(element);
                    }
                    self.pullUpTipsIcon = element.querySelector(SELECTOR_PULL_LOADING);
                    return element;
                }();
            }
        },
        _transitionEnd: function _transitionEnd(e) {
            if (e.target === this.pullDownTips && this.removing) {
                this.removePullDownTips();
            }
        },
        _dragup: function _dragup(e) {
            var self = this;
            if (self.loading) {
                return;
            }
            if (e && e.detail && $.gestures.session.drag) {
                self.isDraggingUp = true;
            } else {
                if (!self.isDraggingUp) {
                    return;
                }
            }
            if (!self.isDragging) {
                if (self._canPullUp()) {
                    self.pullUpLoading(e);
                }
            }
        },
        _canPullUp: function _canPullUp() {
            if (this.isInScroll) {
                var scrollId = this.element.parentNode.getAttribute('data-scroll');
                if (scrollId) {
                    var scrollApi = $.data[scrollId];
                    return Math.abs(scrollApi.y) - Math.abs(scrollApi.maxScrollY) > this.options.up.offset;
                }
            }
            return window.pageYOffset + window.innerHeight + this.options.up.offset >= document.documentElement.scrollHeight;
        },
        _canPullDown: function _canPullDown() {
            if (this.removing) {
                return false;
            }
            if (this.isInScroll) {
                var scrollId = this.element.parentNode.getAttribute('data-scroll');
                if (scrollId) {
                    var scrollApi = $.data[scrollId];
                    return scrollApi.y === 0;
                }
            }
            return document.body.scrollTop === 0;
        },
        _drag: function _drag(e) {
            if (this.loading || this.stopped) {
                e.stopPropagation();
                e.detail.gesture.preventDefault();
                return;
            }
            var detail = e.detail;
            if (!this.isDragging) {
                if (detail.direction === 'down' && this._canPullDown()) {
                    if (document.querySelector('.' + CLASS_PULL_TOP_TIPS)) {
                        e.stopPropagation();
                        e.detail.gesture.preventDefault();
                        return;
                    }
                    this.isDragging = true;
                    this.removing = false;
                    this.startDeltaY = detail.deltaY;
                    $.gestures.session.lockDirection = true;
                    $.gestures.session.startDirection = detail.direction;
                    this._pullStart(this.startDeltaY);
                }
            }
            if (this.isDragging) {
                e.stopPropagation();
                e.detail.gesture.preventDefault();
                var deltaY = detail.deltaY - this.startDeltaY;
                deltaY = Math.min(deltaY, 1.5 * this.options.down.height);
                this.deltaY = deltaY;
                this._pulling(deltaY);
                var state = deltaY > this.options.down.height ? STATE_AFTERCHANGEOFFSET : STATE_BEFORECHANGEOFFSET;
                if (this.state !== state) {
                    this.state = state;
                    if (this.state === STATE_AFTERCHANGEOFFSET) {
                        this.removing = false;
                        this.isNeedRefresh = true;
                    } else {
                        this.removing = true;
                        this.isNeedRefresh = false;
                    }
                    this['_' + state](deltaY);
                }
                if ($.os.ios && parseFloat($.os.version) >= 8) {
                    var clientY = detail.gesture.touches[0].clientY;
                    if (clientY + 10 > window.innerHeight || clientY < 10) {
                        this._dragend(e);
                        return;
                    }
                }
            }
        },
        _dragend: function _dragend(e) {
            var self = this;
            if (SCROLL_Y >= self.options.down.offset) {
                self.isDragging = false;
                self._dragEndAfterChangeOffset(true);
            }
            if (self.isPullingUp) {
                if (self.pullingUpTimeout) {
                    clearTimeout(self.pullingUpTimeout);
                }
                self.pullingUpTimeout = setTimeout(function () {
                    self.isPullingUp = false;
                }, 1000);
            }
        },
        _pullStart: function _pullStart(startDeltaY) {
            this.pullStart(startDeltaY);
            $.trigger(this.element, EVENT_PULLSTART, {
                api: this,
                startDeltaY: startDeltaY
            });
        },
        _pulling: function _pulling(deltaY) {
            this.pulling(deltaY);
            $.trigger(this.element, EVENT_PULLING, {
                api: this,
                deltaY: deltaY
            });
        },
        _beforeChangeOffset: function _beforeChangeOffset(deltaY) {
            this.beforeChangeOffset(deltaY);
            $.trigger(this.element, EVENT_BEFORECHANGEOFFSET, {
                api: this,
                deltaY: deltaY
            });
        },
        _afterChangeOffset: function _afterChangeOffset(deltaY) {
            this.afterChangeOffset(deltaY);
            $.trigger(this.element, EVENT_AFTERCHANGEOFFSET, {
                api: this,
                deltaY: deltaY
            });
        },
        _dragEndAfterChangeOffset: function _dragEndAfterChangeOffset(isNeedRefresh) {
            this.dragEndAfterChangeOffset(isNeedRefresh);
            $.trigger(this.element, EVENT_DRAGENDAFTERCHANGEOFFSET, {
                api: this,
                isNeedRefresh: isNeedRefresh
            });
        },
        removePullDownTips: function removePullDownTips() {
            if (this.pullDownTips) {
                try {
                    this.pullDownTips.parentNode && this.pullDownTips.parentNode.removeChild(this.pullDownTips);
                    this.pullDownTips = null;
                    this.removing = false;
                } catch (e) {}
            }
        },
        pullStart: function pullStart(startDeltaY) {
            this.initPullDownTips(startDeltaY);
        },
        pulling: function pulling(deltaY) {
            this.pullDownTips.style.webkitTransform = 'translate3d(0,' + deltaY + 'px,0)';
        },
        beforeChangeOffset: function beforeChangeOffset(deltaY) {
            this.pullDownTipsIcon.className = CLASS_PULL_TOP_ARROW;
        },
        afterChangeOffset: function afterChangeOffset(deltaY) {
            this.pullDownTipsIcon.className = CLASS_PULL_TOP_ARROW_REVERSE;
        },
        dragEndAfterChangeOffset: function dragEndAfterChangeOffset(isNeedRefresh) {
            if (isNeedRefresh) {
                this.pullDownLoading();
                if (this.pullDownTipsIcon) {
                    this.pullDownTipsIcon.className = CLASS_PULL_TOP_SPINNER;
                }
            } else {
                this.pullDownTipsIcon.className = CLASS_PULL_TOP_ARROW;
                this.endPullDownToRefresh();
            }
        },
        pullDownLoading: function pullDownLoading() {
            if (this.loading) {
                return;
            }
            if (!this.pullDownTips && this.options.down.pullDownTipStyle === 'pullDownTips') {
                this.initPullDownTips();
                this.dragEndAfterChangeOffset(true);
                return;
            } else {
                this.scroll.scrollTo(0, 40, 100);
                this.scroll.stopped = true;
            }
            this.loading = true;
            this.addMask();
            if (this.pullDownTips && this.options.down.pullDownTipStyle === 'pullDownTips') {
                this.pullDownTips.classList.add(CLASS_TRANSITIONING);
                this.pullDownTips.style.webkitTransform = 'translate3d(0,' + this.options.down.height + 'px,0)';
            } else {
                var topTipIcon = this.element.querySelector('#topTipIcon');
                topTipIcon.className = this.options.down.tipColor === '#ffffff' ? 'mui-pull-loading loading-white' : 'mui-pull-loading loading-default';
                topTipIcon.style.webkitAnimation = 'spinner-spin 1s step-end infinite';
                this.element.querySelector('#topTipText').innerText = this.options.down.contentloading;
            }
            this.options.down.callback.apply(this);
        },
        pullUpLoading: function pullUpLoading(e) {
            if (this.loading || this.finished) {
                return;
            }
            this.loading = true;
            this.addMask();
            this.isDraggingUp = false;
            this.pullUpTips.classList.remove(CLASS_HIDDEN);
            e && e.detail && e.detail.gesture && e.detail.gesture.preventDefault();
            this.pullUpTipsIcon.innerHTML = this.options.up.contentrefresh;
            this.options.up.callback.apply(this);
        },
        endPullDownToRefresh: function endPullDownToRefresh() {
            this.loading = false;
            var self = this;
            setTimeout(function () {
                self.scroll.scrollTo(0, 0, 500);
                self.scroll.stopped = false;
            }, 300);
            this.pullUpTips && this.pullUpTips.classList.remove(CLASS_HIDDEN);
            if (this.pullDownTips && this.options.down.pullDownTipStyle === 'pullDownTips') {
                this.pullDownTips.classList.add(CLASS_TRANSITIONING);
                this.pullDownTips.style.webkitTransform = 'translate3d(0,0,0)';
            } else {
                var topTipIcon = this.element.querySelector('#topTipIcon');
                var topTipText = this.element.querySelector('#topTipText');

                topTipIcon.style.webkitTransition = '-webkit-transform 0s ease-in';
                topTipIcon.style.webkitTransform = 'rotate(0deg)';
                topTipIcon.className = 'mui-pull-loading jxddicon icon-caozuochenggong';
                topTipIcon.style.webkitAnimation = '';
                topTipText.innerText = '操作成功 .';

                setTimeout(function () {
                    topTipIcon.className = 'mui-pull-loading mui-icon mui-icon-pulldown';
                    topTipText.innerText = self.options.down.contentdefault;
                    topTipIcon.style.webkitTransition = '-webkit-transform 0.3s ease-in';
                }, 800);
            }
            if (this.deltaY <= 0) {
                this.removePullDownTips();
            } else {
                this.removing = true;
            }
            setTimeout(this.delMask, 100);
        },
        endPullUpToRefresh: function endPullUpToRefresh(finished) {
            if (finished) {
                this.finished = true;
                this.pullUpTipsIcon.innerHTML = this.options.up.contentnomore;
                this.element.removeEventListener('dragup', this);
                window.removeEventListener('scroll', this);
            } else {
                this.pullUpTipsIcon.innerHTML = this.options.up.contentdown;
            }
            this.loading = false;
            if (this.isInScroll) {
                $(this.element.parentNode).scroll().refresh();
            }
            setTimeout(this.delMask, 100);
        },
        addMask: function addMask() {
            if (currentWebview != null) {
                if (currentWebview.parent()) {
                    if (!firstLoad) {
                        currentWebview.parent().setStyle({
                            mask: 'rgba(0,0,0,0)'
                        });
                        currentWebview.show();
                    }
                } else {
                    currentWebview.setStyle({
                        mask: 'rgba(0,0,0,0)'
                    });
                }
            }
        },
        delMask: function delMask() {
            if (currentWebview.parent()) {
                if (!firstLoad) {
                    currentWebview.parent().setStyle({
                        mask: 'none'
                    });
                    currentWebview.show();
                } else {
                    firstLoad = false;
                }
            } else {
                currentWebview.setStyle({
                    mask: 'none'
                });
            }
        },
        setStopped: function setStopped(stopped) {
            if (stopped !== this.stopped) {
                this.stopped = stopped;
                this.pullUpTips && this.pullUpTips.classList[stopped ? 'add' : 'remove'](CLASS_HIDDEN);
            }
        },
        refresh: function refresh(isReset) {
            if (isReset && this.finished && this.pullUpTipsIcon) {
                this.pullUpTipsIcon.innerHTML = this.options.up.contentdown;
                this.element.addEventListener('dragup', this);
                window.addEventListener('scroll', this);
                this.finished = false;
            }
        }
    });
    $.fn.pullToRefresh = function (options) {
        var pullRefreshApis = [];
        options = options || {};
        this.each(function () {
            var self = this;
            var pullRefreshApi = null;
            var id = self.getAttribute('data-pullToRefresh');
            if (!id) {
                id = ++$.uuid;
                $.data[id] = pullRefreshApi = new $.PullToRefresh(self, options);
                self.setAttribute('data-pullToRefresh', id);
            } else {
                pullRefreshApi = $.data[id];
            }
            if (options.up && options.up.auto) {
                pullRefreshApi.pullUpLoading();
            }
            if (options.down && options.down.auto) {
                pullRefreshApi.pullDownLoading();
            }
            pullRefreshApis.push(pullRefreshApi);
        });
        return pullRefreshApis.length === 1 ? pullRefreshApis[0] : pullRefreshApis;
    };
})(mui, window, document);