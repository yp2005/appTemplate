{"version":3,"sources":["src\\common\\utils.js"],"names":["query","document","querySelector","sel","queryAll","querySelectorAll","uuid","v1","uuidV4","v4","hash","method","s","format","sum","createHash","isBuffer","Buffer","sortObject","update","digest","md5","sha1","sha256","base64encode","encode","toString","urlsafe","replace","base64decode","encodeStr","encoding","buf","o","Array","isArray","keys","sort","values","i","length","k","push","clone","obj","len","urlParam2Map","param","v","url","decodeURIComponent","indexOf","split","map","item","stringify","inspect"],"mappings":"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","file":"utils.js","sourceRoot":"C:/Users/dell/AppData/Roaming/HBuilder/userprofiles/18710095921@163.com/appTemplate/unpackage","sourcesContent":["'use strict';\n/*!\n * utils v1.0.0\n * 工具类,提供各种工具方法，会陆续添加\n *\n * Author: liaoxm\n * Date: 2016-06-16\n *\n */\nimport nodeUuid from 'node-uuid';\nimport crypto from 'crypto';\nimport nodeUtil from 'util';\n/**\n * 选择器\n * @param {String} sel   是一个字符串，包含一个或是多个 CSS 选择器 ，多个则以逗号分隔\n * @return {DomObject} 一个 element 对象（DOM 元素）\n * @public\n */\nconst query = sel => {\n    return document.querySelector(sel);\n};\n\n/**\n * 选择器\n * @param {String} sel 一个由逗号连接的包含一个或多个CSS选择器的字符串\n * @return {NodeList} 一个non-live的 NodeList 类型的对象\n * @public\n */\nconst queryAll = sel => {\n    return document.querySelectorAll(sel);\n};\n\n/**\n * 产生一个 v1 (基于时间的) id\n * @return {String} uuid 36位带四个中划线\n * @public\n */\nconst uuid = () => {\n    return nodeUuid.v1(); // -> '6c84fb90-12c4-11e1-840d-7b25c5ee775a'\n};\n\n/**\n * 产生一个 v4 (基于时间的) id\n * @return {String} uuid 36位带四个中划线\n * @public\n */\nconst uuidV4 = () => {\n    return nodeUuid.v4(); // -> '110ec58a-a0f2-4ac4-8393-c866d813b8d1’\n};\n\n/**\n * hash方法\n *\n * @param {String} e.g.: 'md5', 'sha1'\n * @param {String|Buffer} s\n * @param {String} [format] 'hex'，'base64'. default is 'hex'.\n * @return {String} 编码值\n * @private\n */\nconst hash = (method, s, format) => {\n    let sum = crypto.createHash(method);\n    let isBuffer = Buffer.isBuffer(s);\n    if (!isBuffer && typeof s === 'object') {\n        s = JSON.stringify(sortObject(s));\n    }\n    sum.update(s, isBuffer ? 'binary' : 'utf8');\n    return sum.digest(format || 'hex');\n};\n\n/**\n * md5 编码\n *\n * @param {String|Buffer} s\n * @param {String} [format] 'hex'，'base64'. default is 'hex'.\n * @return {String} md5 hash string\n * @public\n */\nconst md5 = (s, format) => {\n    return hash('md5', s, format);\n};\n\n/**\n * sha1 编码\n *\n * @param {String|Buffer} s\n * @param {String} [format] 'hex'，'base64'. default is 'hex'.\n * @return {String} sha1 hash string\n * @public\n */\nconst sha1 = (s, format) => {\n    return hash('sha1', s, format);\n};\n\n/**\n * sha256 编码\n *\n * @param {String|Buffer} s\n * @param {String} [format]  'hex'，'base64'. default is 'hex'.\n * @return {String} sha256 hash string\n * @public\n */\nconst sha256 = (s, format) => {\n    return hash('sha256', s, format);\n};\n\n/**\n * Base64编码.\n *\n * @param {String|Buffer} s 需要编码的字符串\n * @param {Boolean} [urlsafe=false] E是否是url类型，暂时屏蔽.\n * @return {String} base64编码.\n * @public\n */\nconst base64encode = (s /*, urlsafe*/) => {\n    if (!Buffer.isBuffer(s)) {\n        s = new Buffer(s);\n    }\n    let encode = s.toString('base64');\n    let urlsafe = false;\n    if (urlsafe) {\n        encode = encode.replace(/\\+/g, '-').replace(/\\//g, '_');\n    }\n    return encode;\n};\n\n/**\n * Base64字符串解码.\n *\n * @param {String} encode, 需要解码的字符串.\n * @param {Boolean} [urlsafe=false] 是否是url类型，暂时屏蔽.\n * @param {encoding} [encoding=utf8] 字符编码，默认utf8,可选参数\n * @return {String|Buffer}\n * @public\n */\nconst base64decode = (encodeStr /*, urlsafe*/, encoding) => {\n    let urlsafe = false;\n    if (urlsafe) {\n        encodeStr = encodeStr.replace(/\\-/g, '+').replace(/_/g, '/');\n    }\n    let buf = new Buffer(encodeStr, 'base64');\n    if (encoding === 'buffer') {\n        return buf;\n    }\n    return buf.toString(encoding || 'utf8');\n};\n\n/**\n * 对象排序\n * @param {Object} o, 需要排序的对象.\n * @return {Object} 安装key进行排序的对象\n * @public\n */\nconst sortObject = o => {\n    if (!o || Array.isArray(o) || typeof o !== 'object') {\n        return o;\n    }\n    let keys = Object.keys(o);\n    keys.sort();\n    let values = [];\n    for (let i = 0; i < keys.length; i++) {\n        let k = keys[i];\n        values.push([k, sortObject(o[k])]);\n    }\n    return values;\n};\n\n/**\n * @desc 对象克隆\n * @Author yupeng\n * @param {Object} obj  需要克隆的对象.\n * @return {Object} 克隆出来的对象\n * @public\n */\nconst clone = obj => {\n    let o;\n    switch (typeof obj) {\n    case 'undefined':\n        break;\n    case 'string':\n        o = obj + '';\n        break;\n    case 'number':\n        o = obj - 0;\n        break;\n    case 'boolean':\n        o = obj;\n        break;\n    case 'object':\n        if (obj === null) {\n            o = null;\n        } else {\n            if (obj instanceof Array) {\n                o = [];\n                for (let i = 0, len = obj.length; i < len; i++) {\n                    o.push(clone(obj[i]));\n                }\n            } else {\n                o = {};\n                for (let k in obj) {\n                    o[k] = clone(obj[k]);\n                }\n            }\n        }\n        break;\n    default:\n        o = obj;\n        break;\n    }\n    return o;\n};\n\n/**\n * @desc 获取url后面的参数\n * @Author lxm\n * @param {String} url  url串\n * @return {Object} 参数对象\n * @public\n */\nconst urlParam2Map = url => {\n    let param = {};\n    let k,\n        v;\n    url = decodeURIComponent(url);\n    if (url.indexOf('?') !== -1) {\n        url = url.split('?')[1];\n    }\n    url.split('&').map(\n    item => {\n        k = item.split('=')[0];\n        v = item.split('=')[1];\n        param[k] = v;\n    }\n  );\n    return param;\n};\n\n/**\n * 对象转字符串，替代JSON.stringify方法,解决Converting circular structure to JSON\n * @type {Object} obj  需要字符串化的对象\n * @return {String} 字符串\n */\nconst stringify = obj => {\n    return nodeUtil.inspect(obj);\n};\n\n/**\n * 分开导出，用哪个取哪个，引用时需要大括号 ，eg:import {md5,uuid} from 'common/utils',md5('333')\n */\nexport { query, queryAll, uuid, uuidV4, sortObject, base64decode, base64encode, sha256, sha1, md5, clone, urlParam2Map, stringify };\n\n/**\n * 打包导出，会全部引入 ，eg:import utils from 'common/utils'，utils.md5('3333')\n */\nexport default {\n    query,\n    queryAll,\n    uuid,\n    uuidV4,\n    sortObject,\n    base64decode,\n    base64encode,\n    sha256,\n    sha1,\n    md5,\n    clone,\n    urlParam2Map,\n    stringify\n};\n"]}